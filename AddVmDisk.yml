--- 
- name: "Create a VM from  template"
  connection: local
  gather_facts: false
  hosts: localhost
  vars:
    server_name: 'w12test01'
    vm_disks:
      - size_gb: 40
        drive_letter: C
        volume_name: "C Drive"
      - size_gb: 20
        drive_letter: D
        volume_name: "D Drive"
      - size_gb: 10
        drive_letter: E
        volume_name: "E Drive"
    vm_disk_type: thin
    vm_datastore: 'node10_local'
    vm_datacenter: 'nucpod01'
    

  tasks:
    - name: Expand OS Disk if Required
      vmware_guest_disk:
        hostname: '{{ lookup("env", "VMWARE_HOST") }}'
        username: '{{ lookup("env", "VMWARE_USER") }}'
        password: '{{ lookup("env", "VMWARE_PASSWORD") }}'
        name: "{{ server_name }}"
        datacenter: "{{ vm_datacenter }}"
        validate_certs: false
        disk:
          - size_gb: "{{ vm_disks[item].size_gb }}"
            type: "{{ vm_disk_type }}"
            datastore: "{{ vm_datastore }}"
            scsi_controller: 0
            unit_number: 0
      loop: "{{ range(0, vm_disks|length)|list }}"
      when: vm_disks[item].drive_letter == 'C'

    - name: Attach Addittional VMware Disks
      vmware_guest_disk:
        hostname: '{{ lookup("env", "VMWARE_HOST") }}'
        username: '{{ lookup("env", "VMWARE_USER") }}'
        password: '{{ lookup("env", "VMWARE_PASSWORD") }}'
        name: "{{ server_name }}"
        datacenter: "{{ vm_datacenter }}"
        validate_certs: false
        disk:
          - size_gb: "{{ vm_disks[item].size_gb }}"
            type: "{{ vm_disk_type }}"
            datastore: "{{ vm_datastore }}"
            scsi_controller: 0
            unit_number: "{{ item }}"
      loop: "{{ range(0, vm_disks|length)|list }}"
      when: vm_disks[item].drive_letter != 'C'

    - name: Add DC to host Inventory
      add_host:
        name: "{{ server_name }}"
        ansible_winrm_server_cert_validation: ignore
        ansible_port: 5986
        ansible_user: '{{ lookup("env", "WIN_LOCAL_USER") }}'
        ansible_password: '{{ lookup("env", "WIN_LOCAL_PASSWORD") }}'
        ansible_connection: "winrm"

    - name: Check for Storage DSC Powershell module
      win_psmodule:
        name: StorageDsc
        state: present
      delegate_to: "{{ server_name }}"

    - name: Check Storage C
      win_dsc:
        resource_name: WaitForDisk
        DiskID: 0
        RetryIntervalSec: 3
        RetryCount: 3
      delegate_to: "{{ server_name }}"
      ignore_errors: True
      loop: "{{ range(0, vm_disks|length)|list }}"
      when: vm_disks[item].drive_letter == 'C'

    - name: Setup C Drive
      win_dsc:
        resource_name: Disk
        DiskID: 0
        DriveLetter: C
        FSLabel: 'Local Disk'
        PartitionStyle: MBR
        AllowDestructive: True
      delegate_to: "{{ server_name }}"
      ignore_errors: True   
      loop: "{{ range(0, vm_disks|length)|list }}"
      when: vm_disks[item].drive_letter == 'C'

    - name: Check Additional Drives
      win_dsc:
        resource_name: WaitForDisk
        DiskID: "{{ item }}"
        RetryIntervalSec: 3
        RetryCount: 3
      delegate_to: "{{ server_name }}"
      ignore_errors: True
      loop: "{{ range(0, vm_disks|length)|list }}"
      when: vm_disks[item].drive_letter != 'C'

    - name: Setup Additional Drive
      win_dsc:
        resource_name: Disk
        DiskID: "{{ item }}"
        DriveLetter: "{{ vm_disks[item].drive_letter }}"
        FSLabel: "{{ vm_disks[item].volume_name}}"
        PartitionStyle: GPT
        AllowDestructive: True
      delegate_to: "{{ server_name }}"
      ignore_errors: True   
      loop: "{{ range(0, vm_disks|length)|list }}"
      when: vm_disks[item].drive_letter == 'C'